Index: src/main/java/dao/UserDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport model.Users;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\npublic class UserDAO {\r\n    private static final String SELECT_ALL_USERS = \"select * from users\";\r\n    private static final String DELETE_USERS_BY_ID = \"delete from users where user_id = ?;\";\r\n    private static final String FIND_USER_BY_PHONE = \"select user_id,full_name,email,phone,birthday from users where phone =?\";\r\n    private static final String SORT_BY_NAME = \"select * from users order by username;\";\r\n    private static final String SORT_BY_CREATE_AT = \"select * from users order by created_at;\";\r\n    private static final String INSERT_USERS_SQL = \"insert into users(username,password,phone,email,full_name) values  (?,?,?,?,?);\";\r\n    private static final String UPDATE_INFO_USER = \"update users set full_name = ?,birthday=?,email=?,phone=?,password=? where user_id = ?;\";\r\n    private static final String SELECT_USER_BY_ID = \"select full_name,birthday,email,phone,password from users where id =?\";\r\n    public void insertUser(Users user) throws SQLException {\r\n        System.out.println(INSERT_USERS_SQL);\r\n        try (Connection connection = DatabaseConnector.getConnection();\r\n             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USERS_SQL)) {\r\n            preparedStatement.setString(1, user.getUsername());\r\n            preparedStatement.setString(2, user.getPassword());\r\n            preparedStatement.setString(3, user.getPhone());\r\n            preparedStatement.setString(4, user.getEmail());\r\n            preparedStatement.setString(5, user.getFull_name());\r\n            System.out.println(preparedStatement);\r\n            preparedStatement.executeUpdate();\r\n        }\r\n    }\r\n    public List<Users> selectAllUsers(){\r\n        List<Users> users = new ArrayList<>();\r\n        try(Connection connection = DatabaseConnector.getConnection();\r\n            PreparedStatement statement = connection.prepareStatement(SELECT_ALL_USERS)) {\r\n            System.out.println(statement);\r\n            ResultSet resultSet = statement.executeQuery();\r\n            while (resultSet.next()){\r\n                int user_id = resultSet.getInt(\"user_id\");\r\n                String username = resultSet.getString(\"username\");\r\n                String password = resultSet.getString(\"password\");\r\n                String phone = resultSet.getString(\"phone\");\r\n                String email = resultSet.getString(\"email\");\r\n                String role = resultSet.getString(\"role\");\r\n                String full_name = resultSet.getString(\"full_name\");\r\n                Date birthday = resultSet.getDate(\"birthday\");\r\n                String avatar_path = resultSet.getString(\"avatar_path\");\r\n                Timestamp created_at = resultSet.getTimestamp(\"created_at\");\r\n                String status = resultSet.getString(\"status\");\r\n               users.add(new Users(user_id,username,password,phone,email,role,full_name,birthday,avatar_path,created_at,status));\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }return users;\r\n    }\r\n    public boolean deleteUser(int id) throws SQLException{\r\n        boolean rowDeleted;\r\n        try( Connection connection = DatabaseConnector.getConnection();\r\n        PreparedStatement statement = connection.prepareStatement(DELETE_USERS_BY_ID)) {\r\n            statement.setInt(1,id);\r\n            System.out.println(statement);\r\n            rowDeleted = statement.executeUpdate()>0;\r\n        }return rowDeleted;\r\n    }\r\n    public List<Users> sortByName() throws SQLException{\r\n        List<Users> users = new ArrayList<>();\r\n        try(Connection connection = DatabaseConnector.getConnection();\r\n            PreparedStatement statement = connection.prepareStatement(SORT_BY_NAME)) {\r\n            System.out.println(statement);\r\n            ResultSet resultSet = statement.executeQuery();\r\n            while (resultSet.next()){\r\n                int user_id = resultSet.getInt(\"user_id\");\r\n                String username = resultSet.getString(\"username\");\r\n                String password = resultSet.getString(\"password\");\r\n                String phone = resultSet.getString(\"phone\");\r\n                String email = resultSet.getString(\"email\");\r\n                String role = resultSet.getString(\"role\");\r\n                String full_name = resultSet.getString(\"full_name\");\r\n                Date birthday = resultSet.getDate(\"birthday\");\r\n                String avatar_path = resultSet.getString(\"avatar_path\");\r\n                Timestamp created_at = resultSet.getTimestamp(\"created_at\");\r\n                String status = resultSet.getString(\"status\");\r\n                users.add(new Users(user_id,username,password,phone,email,role,full_name,birthday,avatar_path,created_at,status));\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }return users;\r\n    }\r\n    public List<Users> sortByCreateAt() throws SQLException{\r\n        List<Users> users = new ArrayList<>();\r\n        try(Connection connection = DatabaseConnector.getConnection();\r\n            PreparedStatement statement = connection.prepareStatement(SORT_BY_CREATE_AT)) {\r\n            System.out.println(statement);\r\n            ResultSet resultSet = statement.executeQuery();\r\n            while (resultSet.next()){\r\n                int user_id = resultSet.getInt(\"user_id\");\r\n                String username = resultSet.getString(\"username\");\r\n                String password = resultSet.getString(\"password\");\r\n                String phone = resultSet.getString(\"phone\");\r\n                String email = resultSet.getString(\"email\");\r\n                String role = resultSet.getString(\"role\");\r\n                String full_name = resultSet.getString(\"full_name\");\r\n                Date birthday = resultSet.getDate(\"birthday\");\r\n                String avatar_path = resultSet.getString(\"avatar_path\");\r\n                Timestamp created_at = resultSet.getTimestamp(\"created_at\");\r\n                String status = resultSet.getString(\"status\");\r\n                users.add(new Users(user_id,username,password,phone,email,role,full_name,birthday,avatar_path,created_at,status));\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }return users;\r\n    }\r\n    public Users findUserByPhone(){\r\n        Users user;\r\n        try( Connection connection = DatabaseConnector.getConnection();\r\n             PreparedStatement statement = connection.prepareStatement(FIND_USER_BY_PHONE)) {\r\n            System.out.println(statement);\r\n            ResultSet resultSet = statement.executeQuery();\r\n                int user_id = resultSet.getInt(\"user_id\");\r\n                String username = resultSet.getString(\"username\");\r\n                String password = resultSet.getString(\"password\");\r\n                String phone = resultSet.getString(\"phone\");\r\n                String email = resultSet.getString(\"email\");\r\n                String role = resultSet.getString(\"role\");\r\n                String full_name = resultSet.getString(\"full_name\");\r\n                Date birthday = resultSet.getDate(\"birthday\");\r\n                String avatar_path = resultSet.getString(\"avatar_path\");\r\n                Timestamp created_at = resultSet.getTimestamp(\"created_at\");\r\n                String status = resultSet.getString(\"status\");\r\n                user = new Users(user_id,username,password,phone,email,role,full_name,birthday,avatar_path,created_at,status);\r\n\r\n        }catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }return user;\r\n    }\r\n    public void updateInfoUser(String full_name,String birthday,String email,String phone,String password,int user_id){\r\n\r\n        try (Connection connection = DatabaseConnector.getConnection();\r\n             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_INFO_USER)) {\r\n            preparedStatement.setString(1, full_name);\r\n            preparedStatement.setString(2, birthday);\r\n            preparedStatement.setString(3, email);\r\n            preparedStatement.setString(4, phone);\r\n            preparedStatement.setString(5, password);\r\n            preparedStatement.setInt(6,user_id);\r\n            preparedStatement.executeUpdate();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    public Users selectUser(int id) {\r\n        Users user = null;\r\n        try (Connection connection = DatabaseConnector.getConnection();\r\n             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_USER_BY_ID);) {\r\n            preparedStatement.setInt(1, id);\r\n            System.out.println(preparedStatement);\r\n            ResultSet rs = preparedStatement.executeQuery();\r\n            while (rs.next()) {\r\n                String full_name = rs.getString(\"full_name\");\r\n                String birthday = rs.getString(\"birthday\");\r\n                String email = rs.getString(\"email\");\r\n                String phone = rs.getString(\"phone\");\r\n                String password = rs.getString(\"password\");\r\n                user = new Users(full_name, birthday, email, phone,password);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return user;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dao/UserDAO.java b/src/main/java/dao/UserDAO.java
--- a/src/main/java/dao/UserDAO.java	(revision 3cc73727c46564013860492d207aa208db286d57)
+++ b/src/main/java/dao/UserDAO.java	(date 1685235545213)
@@ -29,6 +29,30 @@
             preparedStatement.executeUpdate();
         }
     }
+//    public String insertUser(Users user) throws SQLException {
+//        String result;
+//
+//        System.out.println(INSERT_USERS_SQL);
+//        try (Connection connection = DatabaseConnector.getConnection();
+//             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USERS_SQL)) {
+//            preparedStatement.setString(1, user.getUsername());
+//            preparedStatement.setString(2, user.getPassword());
+//            preparedStatement.setString(3, user.getPhone());
+//            preparedStatement.setString(4, user.getEmail());
+//            preparedStatement.setString(5, user.getFull_name());
+//            System.out.println(preparedStatement);
+//            int rowsAffected = preparedStatement.executeUpdate();
+//
+//            if (rowsAffected > 0) {
+//                result = "Register Success";
+//            } else {
+//                result = "Register Failed";
+//            }
+//        }
+//
+//        return result;
+//    }
+
     public List<Users> selectAllUsers(){
         List<Users> users = new ArrayList<>();
         try(Connection connection = DatabaseConnector.getConnection();
